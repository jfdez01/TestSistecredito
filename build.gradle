buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }
    ext {
        serenityVersion = '2.0.84'
        serenityCucumberVersion = '1.0.21'
        cucumberVersion = '4.2.0'
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:$rootProject.ext.serenityVersion")
 
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'

}


apply plugin: 'net.serenity-bdd.aggregator'
repositories.addAll(buildscript.repositories)
description = 'Automatizacion CINTE'
version '1.0.0'

idea.module {
    downloadJavadoc = true
    downloadSources = true
}



repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}
configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
        preferProjectModules()
        force "io.cucumber:cucumber-core:$cucumberVersion", "io.cucumber:cucumber-java:$cucumberVersion", "io.cucumber:cucumber-junit:$cucumberVersion"
    }
}

dependencies {
    testImplementation "net.serenity-bdd:serenity-core:$rootProject.ext.serenityVersion"
    testImplementation "net.serenity-bdd:serenity-junit:$rootProject.ext.serenityVersion"
    implementation "net.serenity-bdd:serenity-screenplay:$rootProject.ext.serenityVersion"
    implementation "net.serenity-bdd:serenity-screenplay-webdriver:$rootProject.ext.serenityVersion"
    implementation "net.serenity-bdd:serenity-screenplay-rest:$rootProject.ext.serenityVersion"
    testImplementation "net.serenity-bdd:serenity-cucumber4:$rootProject.ext.serenityCucumberVersion"
    testImplementation "io.cucumber:cucumber-core:$rootProject.ext.cucumberVersion"
    testImplementation "io.cucumber:cucumber-junit:$rootProject.ext.cucumberVersion"
    //testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.9.1'
    testImplementation 'org.slf4j:slf4j-simple:1.7.7'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '4.0.1'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.3.0-alpha5'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha5'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'org.json', name: 'json', version: '20190722'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
   // compile files('src/test/resources/driver/azure-mgmt-sql-1.0.0-beta-1.jar')
  compile files('src/test/resources/driver/mssql-jdbc-8.4.1.jre8.jar')
       compile group: 'net.serenity-bdd', name: 'serenity-ensure', version: '2.0.90'
    
 // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
 
   testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'

   
    



       
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
  
 test {

    
 
    systemProperty 'log4j.skipJansi', 'false' // fix log4j2 coloring output

    // We need to have full list of runners to prevent case when count of cucumber forks > count of runners.
    // As result there, runners = ['FeatureSlicedRunner1', 'FeatureSlicedRunner2', 'FeatureSlicedRunner3']
    List<String> runners = file('src/test/java/com/co/cinte').listFiles()
            .collect { it.name }
            .findAll { it =~ 'FeatureSlicedRunner' }
            .collect { it.take(it.lastIndexOf('.')) } // trim '.java' to use file names in gradle test filter

    maxParallelForks = System.properties.'serenity.fork.count' as Integer ?: 1
    maxParallelForks = [maxParallelForks, runners.size()].min() // set correct maximum number of forks, if value in 'serenity.fork.count' was too big
    systemProperty 'serenity.fork.count', maxParallelForks // correct that property as well
    maxParallelForks.times { filter.includeTestsMatching runners[it] }

    ignoreFailures = true
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full' 
systemProperty "cucumber.options", System.getProperty("cucumber.options")    
   
}



gradle.startParameter.continueOnFailure = true